rules_version = '2';

// Helper function to check if user is authenticated
function isAuthenticated() {
  return request.auth != null;
}

// Helper function to get user data (e.g., role, sectors) from Firestore /users collection
// Assumes a /users/{uid} document exists with 'role' and 'secteurs' fields
function getUserData() {
  return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
}

// Helper function to check if user has a specific role
function hasRole(role) {
  let userData = getUserData();
  return userData != null && userData.role == role;
}

// Helper function to check if user has access to a specific sector
// Assumes userData.secteurs is an array of strings
function hasAccessToSector(sector) {
  let userData = getUserData();
  // Allow Admins access to all sectors implicitly, or check specific sectors for others
  return userData != null && (userData.role == 'Admin' || (userData.secteurs != null && sector in userData.secteurs));
}

// Helper function to check if user has access based on the resource's sector field
// Assumes the resource being accessed has a 'secteur' field (e.g., Envoi documents)
function resourceSectorAllowed(resource) {
   let userData = getUserData();
   // Allow Admins access regardless of resource sector
   return userData != null && (userData.role == 'Admin' || (resource.data.secteur != null && resource.data.secteur in userData.secteurs));
}


service cloud.firestore {
  match /databases/{database}/documents {

    // Default Deny: Secure by default
    match /{document=**} {
      allow read, write: if false;
    }

    // Users Collection:
    // - Allow users to read their own profile.
    // - Allow Admins to read/write any profile (for user management).
    // - Allow users to create their own profile document upon signup? (Optional, depends on flow)
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || hasRole('Admin'));
      allow write: if isAuthenticated() && hasRole('Admin');
      // Optional: Allow creation by the user themselves ONLY if document doesn't exist yet
      // allow create: if isAuthenticated() && request.auth.uid == userId && !exists(/databases/$(database)/documents/users/$(userId));
      // Optional: Allow update by the user themselves (e.g., display name)
      // allow update: if isAuthenticated() && request.auth.uid == userId;
    }

    // Ticket Collections (CHR, HACCP, Kezia, Tabac):
    // - Allow authenticated users to read tickets if they have access to that specific sector.
    // - Allow Admins to write (create, update, delete).
    // - Potentially allow Technicians/Commercials to update specific fields? (More granular)
    match /CHR/{ticketId} {
      allow read: if isAuthenticated() && hasAccessToSector('CHR');
      allow write: if isAuthenticated() && hasRole('Admin');
      // Example: Allow update only for Admins or Technicians assigned to CHR
      // allow update: if isAuthenticated() && (hasRole('Admin') || (hasRole('Technician') && hasAccessToSector('CHR')));
    }
    match /HACCP/{ticketId} {
      allow read: if isAuthenticated() && hasAccessToSector('HACCP');
      allow write: if isAuthenticated() && hasRole('Admin');
    }
    match /Kezia/{ticketId} {
      allow read: if isAuthenticated() && hasAccessToSector('Kezia');
      allow write: if isAuthenticated() && hasRole('Admin');
    }
    match /Tabac/{ticketId} {
      allow read: if isAuthenticated() && hasAccessToSector('Tabac');
      allow write: if isAuthenticated() && hasRole('Admin');
    }

    // Envoi (Shipments) Collection:
    // - Allow authenticated users to read shipments if their sectors include the shipment's sector.
    // - Allow Admins to write.
    match /Envoi/{shipmentId} {
      // Read allowed if user is authenticated AND (is Admin OR has access to the specific sector listed IN THE DOCUMENT)
      allow read: if isAuthenticated() && resourceSectorAllowed(resource);
      allow write: if isAuthenticated() && hasRole('Admin');
      // Example: Allow update by Admin or Commercial with access to the sector
      // allow update: if isAuthenticated() && (hasRole('Admin') || (hasRole('Commercial') && resourceSectorAllowed(resource)));
    }

    // Daily Stats Snapshots:
    // - Allow any authenticated user to read.
    // - Allow only Admins (or a specific service account/function) to write.
    match /dailyStatsSnapshots/{snapshotId} {
      allow read: if isAuthenticated();
      // Restrict write access, e.g., only to Admins or a backend function
      allow write: if isAuthenticated() && hasRole('Admin');
      // To allow a Cloud Function (using its service account), you might not need specific rules here
      // if the function runs with elevated privileges, but explicit rules are safer.
    }

    // Geocodes Cache Collection:
    // - Allow any authenticated user to read (to check cache).
    // - Allow any authenticated user to write (to store results).
    // Consider adding rate limiting rules if abuse is a concern.
    match /geocodes/{addressId} {
       allow read, write: if isAuthenticated();
       // Example: Validate written data structure (optional but good practice)
       // allow write: if isAuthenticated() && request.resource.data.keys().hasAll(['latitude', 'longitude', 'timestamp'])
       //                 && request.resource.data.latitude is number
       //                 && request.resource.data.longitude is number
       //                 && request.resource.data.timestamp == request.time; // Ensure server timestamp is used
    }

    // Articles Collection (Example - adjust as needed):
    // - Allow any authenticated user to read.
    // - Allow Admins to write.
    match /articles/{articleId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && hasRole('Admin');
    }

  }
}
